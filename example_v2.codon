import time
import sys
from lib import dpmat, maximum, alpern, canon


def levenshtein(Q, T):
    M = dpmat(len(Q) + 1, len(T) + 1)
    for i in range(len(T) + 1):
        M[i][0] = -2 + i * -4
    for j in range(len(Q) + 1):
        M[0][j] = -2 + j * -4

    # Kernel
    for i in range(1, len(T) + 1):
        for j in range(1, len(Q) + 1):
            M[i][j] = maximum(
                M[i - 1][j] - 2,
                M[i][j - 1] - 2,
                M[i - 1][j - 1] + (2 if T[i - 1] == Q[j - 1] else -3)
            )

    # Aggregation
    return M[-1][-1]


with open(sys.argv[-1], 'r') as file:
    seqs_x = [line.strip() for line in file]

with open(sys.argv[-2], 'r') as file:
    seqs_y = [line.strip() for line in file]


with time.timing("Total: "):
    scores = alpern(levenshtein, canon(seqs_x), canon(seqs_y))
