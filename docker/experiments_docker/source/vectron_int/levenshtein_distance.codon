from experimental.simd import *
from bio import *
import time
import os
import gpu
import sys
from vectron.dispatcher import *

# Although any list initialization method would technically work for the initialization of the matrices
# we found that list comprehensions are the fastest method available out there. Therefore this approach
# has been chosen as our method of choice. However the conventional method is also available in the following
# string which can be used by commenting the existing list comprehension and pasting the following in its stead:
'''
    M = [[0] * (len(q) + 1) for i in range(len(t) + 1)]
    for i in range(len(t) + 1):
        M[i][0] = i * 1
    for j in range(len(q) + 1):
        M[0][j] = j * 1    
'''

var_type = "i16"

# In this DP problem, since the matching comparisons are a bit more complicated (due to ambiguous elements i.e. 'N'), a match
# function has been used instead of a ternary instruction

@std.vectron.dispatcher.vectron_match
def S(x, a, b, am, y):
    if str(x) == "N" or str(y) == "N":
        return am
    elif x == y:
        return a
    else:
        return b

@std.vectron.dispatcher.vectron_calc
def levenshtein(t, q):
    #M = [[0 if (i == 0 and j == 0) else (i * (1)) if (j == 0 and i > 0) else (j * (1)) if (i == 0 and j > 0) else 0 for j in range(len(q) + 1)] for i in range(len(t) + 1)]   
    M = [[0] * (len(q) + 1) for i in range(len(t) + 1)]
    for i in range(len(t) + 1):
        M[i][0] = i * 1
    for j in range(len(q) + 1):
        M[0][j] = j * 1   
    for i in range(1, len(q)):
        for j in range(1, len(t)):       
            M[i][j] = min(M[i - 1][j - 1] + S(q[i - 1], 0, 1, 1, t[j - 1]), M[i - 1][j] + 1, M[i][j - 1] + 1)
    print(M[-1][-1])
    return M[-1][-1]

@std.vectron.dispatcher.vectron_scheduler
def prep_foo(x, y):
    score = [[0 for _ in range(len(y))] for __ in range(len(x))]
    for i in range(len(x)):
        for j in range(len(y)):
            score[i][j] = levenshtein(x[i], y[j])
    return score

with open(sys.argv[-1], 'r') as file:
    seqs_x = [line.strip() for line in file]

with open(sys.argv[-2], 'r') as file:
    seqs_y = [line.strip() for line in file]

SEQ_NO_T = len(seqs_x)
SEQ_NO_Q = len(seqs_y)

with time.timing("Total: "):
    d = prep_foo(seqs_x, seqs_y)
