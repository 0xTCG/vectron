from experimental.simd import *
from bio import *
import time
import os
import gpu
import sys
from vectron.dispatcher import *

var_type = "i16"


@std.vectron.dispatcher.vectron_match
def match(x, a, b, am, y):
    if str(x) == "N" or str(y) == "N":
        return am
    elif x == y:
        return a
    else:
        return b

@std.vectron.dispatcher.vectron_calc
def hamming(t, q):
    M = [[0 for __ in range(len(q) + 1)] for _ in range(len(t) + 1)]
    for i in range(1, len(q) + 1):
        for j in range(1, len(t) + 1):       
            if j - i <= -1 or j - i >= 1:
                    if j - i == -1 or j - i == 1:
                        M[i][j] = -10000
            else:
                M[i][j] = max(M[i - 1][j - 1] + (0 if q[i - 1] == t[j - 1] else 1), 0, 0)
    print(M[-1][-1])
    return M[-1][-1]

@std.vectron.dispatcher.vectron_init
def prep_foo(x, y):
    score = [[0 for _ in range(len(y))] for __ in range(len(x))]
    for i in range(len(x)):
        for j in range(len(y)):
            score[i][j] = hamming(x[i], y[j])
    return score

with open(sys.argv[-1], 'r') as file:
    seqs_x = [line.strip() for line in file]

with open(sys.argv[-2], 'r') as file:
    seqs_y = [line.strip() for line in file]

SEQ_NO_T = len(seqs_x)
SEQ_NO_Q = len(seqs_y)

with time.timing("Total: "):
    d = prep_foo(seqs_x, seqs_y)
