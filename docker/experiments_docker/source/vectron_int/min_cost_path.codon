import time
import sys
import vectron

var_type = "i16"

@vectron.cmp
def S(x, a, b, am, y):
    """
    Due to ambiguous elements ('N'), a specialized match function has been used
    instead of a ternary operator, hence the "@vectron.cmp" decorator.
    """
    if str(x) == "N" or str(y) == "N":
        return am
    elif x == y:
        return a
    else:
        return b

@vectron.kernel
def min_cost_path(h, m):
    q = [[0 if (i == 0 and j == 0) else (1 + i * (2)) if (j == 0 and i > 0) else (1 + j * (3)) if (i == 0 and j > 0) else 0 for j in range(len(m) + 1)] for i in range(len(h) + 1)]
    for i in range(1, len(m) + 1):
        for j in range(1, len(h) + 1):
            q[i][j] = max(
                q[i - 1][j - 1] + S(m[i - 1], 2, -3, -1, h[j - 1]),
                q[i][j - 1] + S(m[i - 1], 3, -3, -2, h[j - 1]),
                q[i - 1][j] + S(m[i - 1], 1, -2, -1, h[j - 1])
            )
    print(q[-1][-1])
    return q[-1][-1]

@vectron.scheduler
def invoke(x, y):
    score = [[0 for _ in range(len(y))] for __ in range(len(x))]
    for i in range(len(x)):
        for j in range(len(y)):
            score[i][j] = min_cost_path(x[i], y[j])
    return score

with open(sys.argv[-1], 'r') as file:
    seqs_x = [line.strip() for line in file]

with open(sys.argv[-2], 'r') as file:
    seqs_y = [line.strip() for line in file]

SEQ_NO_T = len(seqs_x)
SEQ_NO_Q = len(seqs_y)

with time.timing("Total: "):
    d = invoke(seqs_x, seqs_y)

