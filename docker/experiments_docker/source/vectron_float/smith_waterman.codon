from experimental.simd import *
from bio import *
import time
import os
import gpu
import sys
from vectron.dispatcher import *

var_type = "f32"

@std.vectron.dispatcher.vectron_match
def match_func_foo(x, a, b, am, y):
    if str(x) == "N" or str(y) == "N":
        return am
    elif x == y:
        return a
    else:
        return b

@std.vectron.dispatcher.vectron_max
def max_store_foo(lst, ind_row, ind_col, val_1, val_2):
    lst[ind_row][ind_col] = max(val_1, val_2)
    return lst[ind_row][ind_col]

@std.vectron.dispatcher.vectron_calc
def orig_foo(h, m):
    q = [[0 if (_ == 0 and __ == 0) else (-4 + _ * (-2)) if (__ == 0 and _ > 0) else (-4 + __ * (-2)) if (_ == 0 and __ > 0) else 0 for __ in range(len(m) + 1)] for _ in range(len(h) + 1)]
    s = [[-10000 if (_ == 0 and __ == 0) else (-4 + _ * (-2)) if (__ == 0 and _ > 0) else -10000 for __ in range(len(m) + 1)] for _ in range(len(h) + 1)]
    l = [[-10000 if (_ == 0 and __ == 0) else (-4 + __ * (-2)) if (_ == 0 and __ > 0) else -10000 for __ in range(len(m) + 1)] for _ in range(len(h) + 1)]

    for i in range(1, len(m) + 1):
        for j in range(1, len(h) + 1):       
            if j - i <= -105 or j - i >= 105:
                    if j - i == -105 or j - i == 105:
                        q[i][j] = -10000
                        l[i][j] = -10000
                        s[i][j] = -10000
            else:
                q[i][j] = max(q[i - 1][j - 1] + match_func_foo(m[i - 1], 2, -4, -3, h[j - 1]), max_store_foo(s, i, j, s[i - 1][j] - 2, q[i - 1][j] - 6), max_store_foo(l, i, j, l[i][j - 1] - 2, q[i][j - 1] - 6))
    #print(q[-1][-1])
    return q[-1][-1]

@std.vectron.dispatcher.vectron_init
def prep_foo(x, y):
    score = [[0 for _ in range(len(y))] for __ in range(len(x))]
    for i in range(len(x)):
        for j in range(len(y)):
            score[i][j] = orig_foo(x[i], y[j])
    return score

with open(sys.argv[-1], 'r') as file:
    seqs_x = [line.strip() for line in file]

with open(sys.argv[-2], 'r') as file:
    seqs_y = [line.strip() for line in file]

SEQ_NO_T = len(seqs_x)
SEQ_NO_Q = len(seqs_y)

with time.timing("Total: "):
    d = prep_foo(seqs_x, seqs_y)
